import jidouteki
from jidouteki import *
from jidouteki.utils import get
import json
import blackboxprotobuf
import random
import hashlib
import re

SECRET_KEY = "4Kin9vGg"
APP_PARAMS = {
    "os": "android",
    "os_ver": "35",
    "app_ver": 199
}

def md5(string: str):
    return hashlib.md5(string.encode()).digest().hex()

class Mangaplus(WebsiteParser):
    def __init__(self, context: jidouteki.Jidouteki) -> None:
        super().__init__(context)
        self._secret = None # Initialized cached secret
        self.session.headers.update({ "User-Agent": "okhttp/4.12.0" })
    
    # Secure requests require a 'secret' parameter
    # The secret is generated by calling /register with a device_token and a security_key
    @property
    def secret(self) -> str:
        if not self._secret:
            self._secret = self.get_secret(*self.gen_register_params())
        return self._secret
    
    @property
    def meta(self):
        return jidouteki.Metadata(
            key = "mangaplus",
            display_name = "Manga Plus",
            domains=[
                Domain("https://mangaplus.shueisha.co.jp/", "https://jumpg-api.tokyo-cdn.com/api/")
            ]
        )
    
    def check_domain(self, domain):
        # /api root is expected to return "404 Not Found"
        if not domain.base_url: return False
        resp = self.session.get(domain.base_url)
        return resp.text == "404 Not Found"
    
    @jidouteki.test(
        "https://mangaplus.shueisha.co.jp/viewer/1006244", 
        {"series": "100081", "chapter": "1006244"}
    )
    @jidouteki.test(
        "https://mangaplus.shueisha.co.jp/titles/100081", 
        {"series": "100081"}
    )
    @jidouteki.map.match
    def match(self, url):
        SERIES_MATCH = r"https://mangaplus.shueisha.co.jp/titles/(?P<series>\d+)"
        if (m := re.match(SERIES_MATCH, url)): return m.groupdict()

        CHAPTER_MATCH = r"https://mangaplus.shueisha.co.jp/viewer/(?P<chapter>\d+)"
        if (m := re.match(CHAPTER_MATCH, url)):
            match = m.groupdict()
            
            d = self.fetch_viewer(match.get("chapter"))
            
            return {
                **match,
                "series": str(get(d, "1.10.9"))
            }
    
    # Randomly generate a valid (token, key) pair
    def gen_register_params(self):
        random_id = random.randbytes(8).hex()
        token = md5(random_id)
        security_key = md5(token + SECRET_KEY)
        return (token, security_key)
    
    # Register new device given a token and a key
    def get_secret(self, token, key):
        result = self.fetch("register", 
                            method="PUT",
                            params = { 
                                    "device_token": token, 
                                    "security_key": key, 
                                    **APP_PARAMS
                                    }
                            )
        if (result.data):
            message, _ = blackboxprotobuf.protobuf_to_json(result.data)
            message = json.loads(message)
            secret = get(message, "1.2.1")
            return secret
    
    def fetch_title_details(self, series):
        result = self.fetch("title_detailV3", params = {
            "title_id": series,
            **APP_PARAMS,
            "secret": self.secret,
        })
        
        message, _ = blackboxprotobuf.protobuf_to_json(result.data)
        message = json.loads(message)
        return message

    @jidouteki.test({"series": "100081"}) # chapter_groups is list
    @jidouteki.test({"series": "100280"} ) # chapter_groups is obj
    @jidouteki.map.series.chapters
    def chapters(self, series: str):
        details = self.fetch_title_details(series)
        
        chapter_groups = get(details, "1.8.28")
        chapter_data = [] 
        
        # chapter_groups might not be a list
        chapter_groups = chapter_groups if isinstance(chapter_groups, list) else [chapter_groups]
        
        for g in chapter_groups:
            for key, value in g.items():
                if key != "1":
                    if isinstance(value, list):
                        chapter_data.extend(value)
                    elif isinstance(value, dict): # A single chapter is stored directly as a dict
                        chapter_data.append(value)
                        
        assert all([isinstance(v, dict) for v in chapter_data]), "Not all chapter_data elements are objects"

        chapters  = []
        for d in chapter_data:
            # series = d["1"]
            chapter_param = str(d["2"]) # 1009921
            chapter_value  = d["3"] # "#001"
            title = d["4"] # "Chapter 1: That's How Love Starts, Ya Know!"
            # thumbnail = d["5"]
            # release_timestamp = d["6"]
            # free_expire_timestamp =  d["7"]
            # _unknown = d["13"] # 837858
            # comments_count = d["14"]
            
            # "#001" -> 1, "One-shot" -> "One-shot"
            chapter_value = re.sub(r"(?:#0*(\d+)|(.+))", r"\1\2", chapter_value)

            chapters.append(Chapter(
                params = { "chapter": chapter_param },
                chapter = chapter_value,
                title = title,
                language = "en",
            ))
        import logging
        import base64
        logging.log(logging.DEBUG, base64.b64encode(json.dumps(details).encode()))
        logging.log(logging.DEBUG, chapter_data)
        return chapters

    @jidouteki.test({"series": "100081"})
    @jidouteki.map.series.title
    def title(self, series: str):
        d = self.fetch_title_details(series)
        return get(d, "1.8.1.2")
    
    @jidouteki.test({"series": "100081"})
    @jidouteki.map.series.cover
    def cover(self, series: str):
        d = self.fetch_title_details(series)
        return get(d, "1.8.1.4")
    
    def fetch_viewer(self, chapter):
        result = self.fetch("manga_viewer", params = {        
            "chapter_id": chapter,
            "split": "yes",
            "img_quality": "super_high",
            "ticket_reading": "no",
            "free_reading": "no",
            "subscription_reading": "yes",
            "viewer_mode": "horizontal",
            "clang": "eng",
            **APP_PARAMS,
            "secret": self.secret
        })

        message, _ = blackboxprotobuf.protobuf_to_json(result.data)
        message = json.loads(message)
        return message

    @jidouteki.test({"series": "100081", "chapter": "1006245"})
    @jidouteki.test({"series": "100280", "chapter": "1019132"}) # App-only
    @jidouteki.map.images
    def images(self, chapter: str):
        images  = []
        d = self.fetch_viewer(chapter)        
        for stuff in get(d, "1.10.1"):
            if "1" in stuff.keys():
                images.append(get(stuff, "1.1"))
        return images